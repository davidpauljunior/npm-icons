'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _copyPaste = require('copy-paste');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DataURIPath = process.env.DATAURI_N || 'datauri';
const DataURI = require(DataURIPath);
const clipboard = content => (0, _copyPaste.copy)(content, err => console.log(!err ? 'Copied!' : err));

class Cli {
  constructor(flags) {
    this.flags = flags;
    this.dataURI = new DataURI(flags._[0]);
  }

  setOutputHandler(output) {
    this.output = output;
  }

  run() {
    if (this.flags.css) {
      return this.css(this.flags.css, this.dataURI.getCSS(this.flags));
    }

    this.output(this.dataURI.content);
  }

  writeCSS(file, content, action) {
    _fs2.default.writeFile(file, content, 'utf-8', err => {
      if (err) {
        throw err;
      }

      console.log(`File ${ action }: ${ file }`);
    });
  }

  processCSSFile(file, content) {
    if (_fs2.default.existsSync(file)) {
      return _fs2.default.readFile(file, 'utf-8', (err, cssContent) => {
        this.writeCSS(file, cssContent + content, 'updated');
      });
    }

    this.writeCSS(file, content, 'created');
  }

  css() {
    for (var _len = arguments.length, config = Array(_len), _key = 0; _key < _len; _key++) {
      config[_key] = arguments[_key];
    }

    if (typeof config[0] === 'string') {
      return this.processCSSFile.apply(this, config);
    }

    this.output(config[1]);
  }
}

exports.default = flags => {
  const cli = new Cli(flags);
  const outputHandler = flags.copy ? clipboard : console.log;

  cli.setOutputHandler(outputHandler);
  cli.run();
};