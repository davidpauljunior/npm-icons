'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _copyPaste = require('copy-paste');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DataURIPath = process.env.DATAURI_N || 'datauri';
var DataURI = require(DataURIPath);
var clipboard = function clipboard(content) {
  return (0, _copyPaste.copy)(content, function (err) {
    return console.log(!err ? 'Copied!' : err);
  });
};

var Cli = function () {
  function Cli(flags) {
    _classCallCheck(this, Cli);

    this.flags = flags;
    this.dataURI = new DataURI(flags._[0]);
  }

  _createClass(Cli, [{
    key: 'setOutputHandler',
    value: function setOutputHandler(output) {
      this.output = output;
    }
  }, {
    key: 'run',
    value: function run() {
      if (this.flags.css) {
        return this.css(this.flags.css, this.dataURI.getCSS(this.flags));
      }

      this.output(this.dataURI.content);
    }
  }, {
    key: 'writeCSS',
    value: function writeCSS(file, content, action) {
      _fs2.default.writeFile(file, content, 'utf-8', function (err) {
        if (err) {
          throw err;
        }

        console.log('File ' + action + ': ' + file);
      });
    }
  }, {
    key: 'processCSSFile',
    value: function processCSSFile(file, content) {
      var _this = this;

      if (_fs2.default.existsSync(file)) {
        return _fs2.default.readFile(file, 'utf-8', function (err, cssContent) {
          _this.writeCSS(file, cssContent + content, 'updated');
        });
      }

      this.writeCSS(file, content, 'created');
    }
  }, {
    key: 'css',
    value: function css() {
      for (var _len = arguments.length, config = Array(_len), _key = 0; _key < _len; _key++) {
        config[_key] = arguments[_key];
      }

      if (typeof config[0] === 'string') {
        return this.processCSSFile.apply(this, config);
      }

      this.output(config[1]);
    }
  }]);

  return Cli;
}();

exports.default = function (flags) {
  var cli = new Cli(flags);
  var outputHandler = flags.copy ? clipboard : console.log;

  cli.setOutputHandler(outputHandler);
  cli.run();
};